#!/bin/env bash
if [[ -z $1 ]]; 
then
    echo 'Specify your command to help with'
    echo 'domaininfo/nmap/hydra/gobuster/nc/git/google_dorking/smbmap'
fi

if [[ $1 == smbmap ]];
then
    smbmap='smbmap -H <host_IPv4>'

    echo "1) $smbmap - enumerate remote host for available smb attributes"

    read -t 60 -p 'state your choice: ' choice
    case $choice in
        1) echo -n $smbmap | xclip -selection c;;
        *) echo 'nothing was chosen';;
    esac
fi

if [[ $1 == domaininfo ]];
then
    whois='whois <domain>'
    nslookup='nslookup <domain>'
    theHarvester='theHarvester -d <domain> -b <source>'
    dig='dig <domain>'
    host='host <hostname>'

    echo "1) $whois - contact info/server addresses/other"
    echo "2) $nslookup - resolve the hostname to an IP address"
    echo "3) $theHarvester - automated gathering of email addresses"
    echo "4) $dig - dns lookup utility"
    echo "5) $host - names enumeration"

    read -t 60 -p 'state your choice: ' choice
    case $choice in
        1) echo -n $whois | xclip -selection c;;
        2) echo -n $nslookup | xclip -selection c;;
        3) echo -n $theHarvester | xclip -selection c;;
        4) echo -n $dig | xclip -selection c;;
        5) echo -n $host | xclip -selection c;;
        *) echo 'nothing was chosen';;
    esac
fi

if [[ $1 == nmap ]];
then
    nmap_fast='nmap -sn -T5 $eth0_gateway/24'
    max_info_target='nmap -sS -A -O -p- -oN $target.scan $target'

    echo "1) $nmap_fast - scan all network you're in with subnet mask of 24 bits"
    echo "2) $max_info_target - scan single target for max data/save to file"

    read -t 60 -p 'state your choice: ' choice
    case $choice in
        1) echo -n $nmap_fast | xclip -selection c;;
        1) echo -n $max_info_target | xclip -selection c;;
        *) echo 'nothing was chosen';;
    esac
fi

if [[ $1 == hydra ]]; 
then
    ssh_bruteforce='hydra [-l|-L] <login> [-p|-P] <pwd> -s <port> <host> ssh -vV'
    http_basicauth='hydra [-l|-L] <login> [-p|-P] <pwd> -s <port> -f <host> http[s]-[post|get]-form /<login-page>'
    http_auth='hydra [-l|-L] <login> [-p|-P] <pwd> -s <port> -f <host> http[s]-[post|get]-form /<login-page>'

    echo "1) $ssh_bruteforce"
    echo "2) $http_basicauth"
    echo "3) $http_auth"

    read -t 30 -p 'state your choice: ' choice
    case $choice in
        1) echo -n $ssh_bruteforce | xclip -selection c;;
        2) echo -n $http_basicauth | xclip -selection c;;
        3) echo -n $http_auth | xclip -selection c;;
        *) echo 'nothing was chosen';;
    esac
fi

if [[ $1 == gobuster ]]; 
then
    a='gobuster dir -u <target> -w <wordlist> -t 150'
    echo "1) $a"
    
    read -t 30 -p 'state your choice: ' choice
    case $choice in
        1) echo -n $a | xclip -selection c;;
        *) echo 'nothing was chosen';;
    esac
fi

if [[ $1 == nc ]]; 
then
    nc_intercept='nc -nlvp <port>'

    echo "1) $nc_intercept - catch reverse shell from exploited target"

    read -t 30 -p 'state your choice: ' choice
    case $choice in
        1) echo -n $nc_intercept | xclip -selection c;;
        *) echo 'nothing was chosen';;
    esac
fi

if [[ $1 == git ]];
then
    git_rm_remote='git rm -r --cached <folder_name>'

    echo "Remove object from remote repo, not local"
    echo "1) $git_rm_remote"

    read -t 30 -p 'state your choice: ' choice
    case $choice in
        1) echo -n $git_rm_remote | xclip -selection c;;
        *) echo 'nothing was chosen';;
    esac
fi

if [[ $1 == google_dorking ]];
then
    echo "    - cache:[url]  -   Shows the version of the web page from the search engineâ€™s cache."
    echo "    - related:[url]  -   Finds web pages that are similar to the specified web page."
    echo "    - info:[url]  -   Presents some information that Google has about a web page, including similar pages, the cached version of the page, and sites linking to the page."
    echo "    - site:[url]  -   Finds pages only within a particular domain and all its subdomains."
    echo "    - intitle:[text] or allintitle:[text]  -   Finds pages that include a specific keyword as part of the indexed title tag. You must include a space between the colon and the query for the operator to work in Bing."
    echo "    - allinurl:[text]  -   Finds pages that include a specific keyword as part of their indexed URLs."
    echo "    - meta:[text]  -   Finds pages that contain the specific keyword in the meta tags."
    echo "    - filetype:[file extension]  -   Searches for specific file types."
    echo "    - intext:[text], allintext:[text], inbody:[text]  -   Searches text of page. For Bing and Yahoo the query is inbody:[text]. For DuckDuckGo the query is intext:[text]. For Google either intext:[text] or allintext:[text] can be used."
    echo "    - inanchor:[text]  -   Search link anchor text"
    echo "    - location:[iso code] or loc:[iso code], region:[region code]  -   Search for specific region. For Bing use location:[iso code] or loc:[iso code] and for DuckDuckGo use region:[iso code].An iso location code is a short code for a country for example, Egypt is eg and USA is us. https://en.wikipedia.org/wiki/ISO_3166-1"
    echo "    - contains:[text]  -   Identifies sites that contain links to filetypes specified (i.e. contains:pdf)"
    echo "    - altloc:[iso code]  -   Searches for location in addition to one specified by language of site (i.e. pt-us or en-us)"
    echo "    - feed:[feed type, i.e. rss]  -   Find RSS feed related to search term"
    echo "    - hasfeed:[url]  -   Finds webpages that contain both the term or terms for which you are querying and one or more RSS or Atom feeds."
    echo "    - ip:[ip address]  -   Find sites hosted by a specific ip address"
    echo "    - language:[language code]  -   Returns websites that match the search term in a specified language"
    echo "    - book:[title]  -   Searches for book titles related to keywords"
    echo "    - maps:[location]  -   Searches for maps related to keywords"
    echo "    - linkfromdomain:[url]  -   Shows websites whose links are mentioned in the specified url (with errors)"
fi
