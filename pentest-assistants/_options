#!/bin/env bash

values_dotfile="$HOME/.tmp_values.json"

function get_network_interfaces {
    array_test=()
    for iface in $(ifconfig | cut -d " " -f1| tr ":" "\n" | awk NF | egrep -w "wlan[0-9]{1}|eth[0-9]{1}|tun[0-9]{1}"); do
        array_test+=("$iface")
    done
    echo -n ${array_test[@]}
}

function create_j_str {
    network_interfaces=$(get_network_interfaces)

    for interface in ${network_interfaces[@]}; do
        echo $interface
    done
}

if [[ ! -f ${values_dotfile} ]]; then
    #eth0=$(ifconfig | grep -A 1 eth0 | tail -1 | column -t | awk '{print $2}')
    #eth0_g=$(netstat -rn 2>/dev/null | grep eth0 | awk '{print $2}' | head -1 | tr -d "\n")

    #tun0=$(ifconfig | grep -A 1 eth0 | tail -1 | column -t | awk '{print $2}')
    #tun0_g=$(netstat -rn 2>/dev/null | grep eth0 | awk '{print $2}' | head -1 | tr -d "\n")

    j_str="\"target\": \"127.0.0.1\", \"eth0\": \"${eth0}\", \"eth0_g\": \"${eth0_g}\""

    echo "{ ${j_str} }" | jq . > ${values_dotfile}
fi

target=$(jq '.target' ${values_dotfile} | tr -d '"')

function return_ip {
    if [[ -z $1 ]]; then
        echo -n "N/A"
        exit 1
    else
        echo -n $1
    fi
}

function ip_status {
    if ping -c 1 -W 0.5 $1 > /dev/null 2>&1; [[ $? -eq 0 ]]; then
        echo -n "UP" 
    else
        echo -n "DOWN"
    fi
}

function update_network_interface_ip {
    local net_ip=$(ifconfig | grep -A 1 $1 | tail -1 | column -t | awk '{print $2}')
    if [[ $net_ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        local line=$(grep -n -m 1 "$1"_ip ~/.pentest_values | cut -f1 -d:)

        if [[ $line ]]; then
            case $EUID in
                "0") sed -i "${line}s/.*/export $1_ip=$net_ip/" ~/.pentest_values; sed -i "${line}s/.*/export $1_ip=$net_ip/" /home/*/.pentest_values;;
                *) sed -i "${line}s/.*/export $1_ip=$net_ip/" ~/.pentest_values;;
            esac
        fi

    fi
}

function update_network_interface_gateway {
    local net_gateway=$(netstat -rn 2>/dev/null | grep $1 | awk '{print $2}' | head -1 | tr -d "\n")
    if [[ $net_gateway =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        local line=$(grep -n -m 1 "$1"_gateway ~/.pentest_values | cut -f1 -d:)

        if [[ $line ]]; then
            case $EUID in
                "0") sed -i "${line}s/.*/export $1_gateway=$net_gateway/" ~/.pentest_values; sed -i "${line}s/.*/export $1_gateway=$net_gateway/" /home/*/.pentest_values;;
                *) sed -i "${line}s/.*/export $1_gateway=$net_gateway/" ~/.pentest_values;;
            esac
        fi
        
    fi
}

function get_options {
    local ip="$1"_ip
    echo -e "\$$1_ip: \033[1m$(return_ip ${!ip})\033[0m"
    local gateway="$1"_gateway
    echo -e "\$$1_gateway: \033[1m$(return_ip ${!gateway})\033[0m"
    echo
}

function get_network_interfaces {
    array_test=()
    for iface in $(ifconfig | cut -d " " -f1| tr ":" "\n" | awk NF | egrep -w "wlan[0-9]{1}|eth[0-9]{1}|tun[0-9]{1}"); do
        array_test+=("$iface")
    done
    echo -n ${array_test[@]}
}

network_interfaces=$(get_network_interfaces)

for interface in ${network_interfaces[@]}; do
    echo $interface

    #update_network_interface_ip $interface;
    #update_network_interface_gateway $interface;
    #get_options $interface;

done

#function print_ports {
#    echo "Ports:"
#    echo -en "\$port: \033[1m$(return_ip $port)\033[0m\n";
#    echo -en "\$port1: \033[1m$(return_ip $port1)\033[0m\n\n";
#}
#
#print_ports
#
#function print_targets {
#    echo "Targets:"
#    echo -en "\$target: \033[1m$(return_ip $target)\033[0m  status: "; echo -e "\033[1m$(ip_status $target)\033[0m"
#    echo -en "\$target1: \033[1m$(return_ip $target1)\033[0m  status: "; echo -e "\033[1m$(ip_status $target1)\033[0m"
#    echo -en "\$target2: \033[1m$(return_ip $target2)\033[0m  status: "; echo -e "\033[1m$(ip_status $target2)\033[0m"
#    echo -en "\$remote_host: \033[1m$(return_ip $remote_host)\033[0m  status: "; echo -e "\033[1m$(ip_status $remote_host)\033[0m"
#    echo
#}
#
#print_targets
