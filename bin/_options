#!/bin/env bash
# this constant is bad
readonly VALUES_DOTFILE="$HOME/.pentest_values.json"
declare -A associativeArr

function get_network_interfaces {
    for intf in $(ifconfig | rg -wo "eth[0-9]|wlan[0-9]|tun[0-9]"); do
        intf_ip=$(ifconfig ${intf} | rg -w 'inet' | awk '{print $2}')
        [[ ${intf_ip} =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]] && array_test+=(${intf}) 
    done

    echo -n ${array_test[@]}
}

function get_interface_parameters {
    # TODO: instead of ifconfig there must be something more distributed <14-05-22, modernpacifist> #
    intf_ip=$(ifconfig ${1} | rg -w 'inet' | awk '{print $2}')
    intf_ip_g=`echo ${intf_ip} | cut -d"." -f1-3`.1

    echo -n "\"${1}_ip\": \"${intf_ip}\", \"${1}_g\": \"${intf_ip_g}\", "
}

function form_json_string {
    interfaces=$(get_network_interfaces)
    for intf in $interfaces; do
        j_str+=$(get_interface_parameters ${intf})
    done

    echo -n ${j_str::-2}
}

function ip_status {
    ping -c 1 -W 0.5 ${1} > /dev/null 2>&1; [[ $? -eq 0 ]] && echo -n "UP" || echo -n "DOWN"
}

function parse_field {
    # TODO: must return (key_name, value) <14-05-22, modernpacifist> #
    #echo -n $(jq ". | to_entries | map(select(.key | match(\"${1}\"))) | map(.value)" ${VALUES_DOTFILE} | tr -d '\[\],\"')
    #{ read key value ; } < <(grep 'target' ${VALUES_DOTFILE} | tr -d '":,' | awk '{print $1 " " $2}')
    #echo $(grep "${1}" ${VALUES_DOTFILE} | tr -d '":,' | awk '{print $1 " " $2}')
    #values_arr=$(grep "${1}" ${VALUES_DOTFILE} | tr -d '":,' | awk '{print $1 " " $2}')

    #readarray -d '\n' -t strarr <<<`read -p "$(grep "${1}" ${VALUES_DOTFILE} | tr -d '":,' | awk '{print $1 " " $2}')"`
    #readarray -d '\n' -t strarr <<<`read -p "$(grep ${1} ${VALUES_DOTFILE} | tr -d '":,' | awk '{print $1 " " $2}')"`
    #echo -n $strarr
    #arr=($(grep ${1} ${VALUES_DOTFILE} | tr -d '":,' | awk '{print $1 " " $2}'))

    #readarray -t arr <<<$(grep ${1} ${VALUES_DOTFILE} | tr -d '":,' | awk '{print $1 " " $2}')
    #echo $arr

    #str=($(grep ${1} ${VALUES_DOTFILE} | tr -d '":,' | awk '{print $1 " " $2}'))
    #echo ${str[@]}

    #str=($(grep ${1} ${VALUES_DOTFILE} | tr -d '":,' | awk '{print $1 " " $2}'))
    #echo ${str[@]}

    a=$(grep ${1} ${VALUES_DOTFILE} | tr -d '":,' | awk '{print $1 " " $2}')

    IFS=$'\n'
    for i in ${a[@]}; do
        key=$(echo -n $i | awk '{print $1}')
        value=$(echo -n $i | awk '{print $2}')
        associativeArr+=([${key}]=${value})
    done

    #for i in ${a[@]}; do
        #echo $i | awk '{print $1 " " $2}'
    #done

    #read -a strarr <<<$(grep ${1} ${VALUES_DOTFILE} | tr -d '":,' | awk '{print $1 " " $2}') #reading str as an array as tokens separated by IFS

    #echo -n $associativeArr
}

function print_options {
    interfaces=$(get_network_interfaces)
    if [[ ! -z ${interfaces} ]]; then
        echo 'Localhost addresses:'
        for intf in $(get_network_interfaces); do 
            echo ${intf}
            echo -e "    ip: $(parse_field ${intf}_ip)"
            echo -e "    gateway: $(parse_field ${intf}_g)"
        done
    fi

    #a=$(parse_field "target")
    #echo ${a[*]}
    parse_field "target"
    echo ${#associativeArr[*]}
    for key in ${!associativeArr[@]}; do
        echo $key ${associativeArr[$key]}
    done

    #if [[ ! -z ${targets} ]]; then
        #echo 'Targets:'
        #for ip in ${targets}; do
            ##echo -e "    ${ip} STATE: $(ip_status ${ip})"
            ##echo -e "    ${ip} STATE: $(ip_status ${ip})"
            #echo -e $ip
        #done
    #fi

    #ports=$(parse_field "port")
    #if [[ ! -z ${ports} ]]; then
        #echo 'Ports:'
        #for port in ${ports}; do
            #echo -e "    ${port}"
        #done
    #fi
}

if [[ ! -f ${VALUES_DOTFILE} ]]; then
    echo -n "{ $(form_json_string) }" | jq '.' > ${VALUES_DOTFILE}
else 
    m_json=$(jq "." ${VALUES_DOTFILE})
    echo -n ${m_json} | jq ". + { $(form_json_string) }" > ${VALUES_DOTFILE}
fi

print_options
