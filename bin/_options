#!/bin/env bash

# global constants
readonly VALUES_DOTFILE="$HOME/.pentest_values.json"
declare -A TARGET_DICT

function get_network_interfaces {
    for intf in $(ifconfig | rg -wo "eth[0-9]|wlan[0-9]|tun[0-9]|enp3s[0-9]"); do
        intf_ip=$(ifconfig ${intf} | rg -w 'inet' | awk '{print $2}')
        [[ ${intf_ip} =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]] && interfaces_array+=(${intf}) 
    done

    echo -n ${interfaces_array[@]}
}

function get_interface_parameters {
    # TODO: instead of ifconfig there must be something more distributed <14-05-22, modernpacifist> #
    intf_ip=$(ifconfig ${1} | rg -w 'inet' | awk '{print $2}')
    intf_ip_g=`echo ${intf_ip} | cut -d"." -f1-3`.1

    echo -n "\"${1}_ip\": \"${intf_ip}\", \"${1}_g\": \"${intf_ip_g}\", "
}

function form_json_string {
    for intf in ${1}; do
        j_str+=$(get_interface_parameters ${intf})
    done

    echo -n ${j_str::-2}
}

function get_host_status {
    ping -c 1 -W 0.5 ${1} > /dev/null 2>&1; [[ $? -eq 0 ]] && echo -n "UP" || echo -n "DOWN"
}

# TODO: refactor with grep <14-05-22, modernpacifist> #
function parse_json_field {
    echo -n $(jq ". | to_entries | map(select(.key | match(\"${1}\"))) | map(.value)" ${VALUES_DOTFILE} | tr -d '\[\],\"')
}

#function update_target_dict {
    #parsed_values=$(grep ${1} ${VALUES_DOTFILE} | tr -d '":,' | awk '{print $1 " " $2}')
    #IFS=$'\n'
    #for value_pair in ${parsed_values[@]}; do
        #key=$(echo -n $value_pair | awk '{print $1}')
        #value=$(echo -n $value_pair | awk '{print $2}')
        #if [[ ! -z $key ]] && [[ ! -z $value ]]; then
            #TARGET_DICT+=([${key}]=${value})
        #fi
    #done
#}
function update_target_dict {
    parsed_values=$(grep ${1} ${VALUES_DOTFILE} | tr -d '":,' | awk '{print $1 " " $2}')
    IFS=$'\n'
    for value_pair in ${parsed_values[@]}; do
        key=$(echo -n $value_pair | awk '{print $1}')
        value=$(echo -n $value_pair | awk '{print $2}')
        if [[ ! -z $key ]] && [[ ! -z $value ]]; then
            TARGET_DICT+=([${key}]=${value})
        fi
    done
}

function print_options {
    network_interfaces=("$@")
    if (( ${#network_interfaces[*]} > 0 )); then
        echo 'Localhost interfaces:'
        for interface in ${network_interfaces[@]}; do 
            printf "    interface: %-10s\n" ${interface}
            printf "%15s: %-20s\n" ${interface}_ip $(parse_json_field ${interface}_ip)
            printf "%15s: %-20s\n" ${interface}_g $(parse_json_field ${interface}_g)
        done
    fi

    update_target_dict "target"
    if (( ${#TARGET_DICT[*]} > 0 )); then
        echo 'Targets:'
        for key in ${!TARGET_DICT[@]}; do
            host_address=${TARGET_DICT[$key]}
            printf "    name: %-10s address: %-15s state: %-15s\n" ${key} ${host_address} $(get_host_status $host_address)
        done
    fi

    update_target_dict "port"

    #if [[ ! -z ${targets} ]]; then
        #echo 'Targets:'
        #for ip in ${targets}; do
            ##echo -e "    ${ip} STATE: $(get_host_status ${ip})"
            ##echo -e "    ${ip} STATE: $(get_host_status ${ip})"
            #echo -e $ip
        #done
    #fi

    #ports=$(parse_field "port")
    #if [[ ! -z ${ports} ]]; then
        #echo 'Ports:'
        #for port in ${ports}; do
            #echo -e "    ${port}"
        #done
    #fi
}

# accepts interfaces
function update_dotfile {
    if [[ ! -f ${VALUES_DOTFILE} ]]; then
        echo -n "{ $(form_json_string ${1}) }" | jq '.' > ${VALUES_DOTFILE}
    else 
        m_json=$(jq "." ${VALUES_DOTFILE})
        echo -n ${m_json} | jq ". + { $(form_json_string ${1}) }" > ${VALUES_DOTFILE}
    fi
}

available_interfaces=$(get_network_interfaces)
update_dotfile ${available_interfaces[@]}
print_options ${available_interfaces[@]}
